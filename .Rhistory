knitr::opts_chunk$set(echo = FALSE)
# M. Gonzalo Claros
# 17/09/2021
# CV grÃ¡fico a partir de Google Scholar
###############################
## Configuracion del entorno ##
###############################
# Instala scholar desde CRAN
if(!require(scholar)){
install.packages("scholar", dependencies=TRUE)
}
# Instala otras librerÃ­as necesarias, si es que no las tienes ya
if(!require(ggplot2)){
install.packages("ggplot2", dependencies=TRUE)
}
if(!require(gridExtra)){
install.packages("gridExtra", dependencies=TRUE)
}
# limpia la memoria RAM
rm(list = ls())
# fecha y hora para personalizar
dia_y_hora <- format(Sys.time(), "%F_%H.%M.%S")
# carga las librerÃ­as necesarias
library(scholar)
library(ggplot2)
library(gridExtra)
# Crea una carpeta personalizada para cada ejecuciÃ³ donde se guardarÃ¡n los ficheros de salida
tmp <- getwd()
ggsch_wd <- paste0(tmp, "/ScholarCV-", dia_y_hora)
ifelse(!dir.exists(ggsch_wd),
dir.create(ggsch_wd,
recursive=TRUE),
FALSE)
## [1] FALSE si ya existÃ­a. No se crearÃ¡ de nuevo
## [1] TRUE si no existÃ­a y hay que crearlo
# Establecer el directorio de trabajo
setwd(ggsch_wd)
#########################
## ID del investigador ##
#########################
# Define Google Scholar IDs of interest here
# David Montaner
ID <- "vUjCSWEAAAAJ&h"
# Ignacio Medina
ID2 <- "dcHF2MYAAAAJ&hl"
# Te pedirÃ¡ introducir un ID si es que no definiste ninguno
if(ID == ""){
ID <- readline(prompt="Enter Scholar ID: ")
}
cat("Retrieving citation data...\n")
# print() es Ãºtil para imprimir objetos, no para sacar mensajes.
# message() es una manera alternativa de concatenar textos, pero aÃ±ade siempre el \n al final, y sale en rojo como los mensajes de error o advertencias
# Obtener las citas
citeByYear <- get_citation_history(ID)
cat("... citations\n")
# Obtener otra informaciÃ³n del perfil
profile <- get_profile(ID)
cat("... profile\n")
# Obtener las publicaciones
pubs <- get_publications(ID)
cat("... publications.\n\n")
# AÃ±adir una columna más con el orden (rank)
pubs$rank <- seq.int(nrow(pubs))
# Cálculo del Indice H actual y futuro
thisYear <- as.integer(format(Sys.Date(), "%Y"))
hIndex <- predict_h_index(ID)
hIndex$years_ahead <- hIndex$years_ahead + thisYear
yearRange <- range(pubs$year, na.rm = TRUE)
theRange <- yearRange[2] - yearRange[1]
cat("Google Scholar's CV summary in", thisYear, ":\n")
cat("Author name:        ", profile$name, "\n")
cat("Affiliation:        ", profile$affiliation, "\n")
cat("Analysed years     =", theRange, "\n")
cat("Total publications =", nrow(pubs), "\n")
cat("Cited =             ", profile$total_cites, "\n")
cat("H-Index =           ", hIndex$h_index[1], "\n\n")
# Enregistrer les articles comme une table csv
id_citations_filepath <- paste("citations-",
profile$name, "-",
ID, "-",
dia_y_hora,
".csv",
sep="")
write.csv(pubs, file = id_citations_filepath)
message("Data saved in ->", id_citations_filepath,"\n")
### CV grÃ¡fico
# ArtÃ­culos ordenados por nÃºmero de citas y pendiente con el Ã­ndice H arriba a la derecha
p1 <- ggplot(pubs, aes(x = rank, y = cites)) +
geom_point(size = 4, alpha = 0.5, shape = 4) +
geom_line(colour = "orange", alpha = 0.7, size = 1.5) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed") +
annotate("text", y = max(pubs$cites), x = max(pubs$rank), label=profile$h_index, hjust = 1) +
labs(x = "Rank", y = "Citations per paper") +
theme(axis.text = element_text(size = 20), axis.title = element_text(size = 24, face = "bold"))
# Ranked total cites of papers and h slope with h in top right
p2 <- ggplot(citeByYear, aes(x = year, y = cites)) +
geom_col(fill = "blue", alpha = 0.7) +
labs(x = "Year", y = "Total Citations") +
theme(axis.text = element_text(size = 20), axis.title = element_text(size = 24, face = "bold"))
# Citations per paper versus year published
p3 <- ggplot(pubs, aes(x = year, y = cites)) +
geom_point(colour = "orange", alpha = 0.5, size = 2) +
labs(x = "Year published", y = "Citations per paper") +
theme(axis.text = element_text(size = 20), axis.title = element_text(size = 24, face = "bold"))
# H-Index prediction for 11 years
p4 <- ggplot(hIndex, aes(x = years_ahead, y = h_index)) +
xlim(min(hIndex$years_ahead)-1, max(hIndex$years_ahead) + 1) +
geom_col(alpha = 0.7) +
labs(x = "Year", y = "H-index prediction") +
theme(axis.text = element_text(size = 20), axis.title = element_text(size = 24, face = "bold"))
# make the grid and save the plot
cv_plots <- paste("CVplots-",
profile$name, "-",
ID, "-",
dia_y_hora,
".png",
sep="")
# dev.new()
png(cv_plots, width = 1200, height = 1200)
grid.arrange(p1, p2, p3, p4, nrow = 2)
dev.off()
message("CV plots were saved in ->", cv_plots, "\n")
# Red de coautores (pero solo los que estÃ¡n en Google Schollar)
# Hay que hacerla de bajo nivel para que no resulte ilegible
coauthor_network <- get_coauthors(ID, n_coauthors = 7)
ca_p <- plot_coauthors(coauthor_network)
cv_acoauthors <- paste("coauthorNetwork-",
profile$name, "-",
ID, "-",
dia_y_hora,
".png",
sep="")
# dev.new()
png(cv_acoauthors, width = 600, height = 600)
grid.arrange(ca_p)
dev.off()
message("Co-author network was saved in ->", cv_acoauthors, "\n")
####################################
## Compare two researchers ##
####################################
# Compare CVs
ids <- c(ID, ID2)
# Get a data frame comparing the number of citations to their work in
# a given year
cs <- compare_scholars(ids)
# remove some 'bad' records without sufficient information
cs <- subset(cs, !is.na(year) & year > 1900)
names <- unique(cs$name)
cat("Comparing careers of:\n", toString(names), "\n")
# comparative representation of cites by year
cs_p <- ggplot(cs, aes(year, cites, group=name, color=name)) +
geom_line() +
theme(legend.position="bottom")
# Compare their career trajectories, based on year of first citation
csc <- compare_scholar_careers(ids)
# plot comparative careers
csc_p <- ggplot(csc, aes(career_year, cites, group=name, color=name)) +
geom_line() +
geom_point() +
theme(legend.position=c(.2, .8))
# Save comparative records
comparative <- paste("comparativeCareers-",
dia_y_hora,
".png",
sep="")
png(comparative, width = 1200, height = 600)
grid.arrange(cs_p, csc_p, nrow = 1)
dev.off()
message("Comparative careers were saved in ->", comparative, "\n")
# get back to the original directoy
setwd("../")
##############################
## INFO SUR L'ENVIRONNEMENT ##
##############################
# variables
print(ls())
# libraries et d'autres infos
print(sessionInfo())
knitr::opts_chunk$set(echo = FALSE)
# Instala scholar desde CRAN
if(!require(scholar)){
install.packages("scholar", dependencies=TRUE)
}
# Instala otras librerias necesarias, si es que no las tienes ya
if(!require(ggplot2)){
install.packages("ggplot2", dependencies=TRUE)
}
if(!require(gridExtra)){
install.packages("gridExtra", dependencies=TRUE)
}
# limpia la memoria RAM
rm(list = ls())
# fecha y hora para personalizar
dia_y_hora <- format(Sys.time(), "%F_%H.%M.%S")
# carga las librerias necesarias
library(scholar)
library(ggplot2)
library(gridExtra)
# Crea una carpeta personalizada para cada ejecucion donde se guardaran los ficheros de salida
tmp <- getwd()
ggsch_wd <- paste0(tmp, "/ScholarCV-", dia_y_hora)
ifelse(!dir.exists(ggsch_wd),
dir.create(ggsch_wd,
recursive=TRUE),
FALSE)
## [1] FALSE si ya existia. No se creara de nuevo
## [1] TRUE si no exista y hay que crearlo
# Establecer el directorio de trabajo
setwd(ggsch_wd)
#########################
## ID del investigador ##
#########################
# Define Google Scholar IDs of interest here
# David Montaner
ID <- "vUjCSWEAAAAJ&h"
# Ignacio Medina
ID2 <- "dcHF2MYAAAAJ&hl"
# Te pedirÃ¡ introducir un ID si es que no definiste ninguno
if(ID == ""){
ID <- readline(prompt="Enter Scholar ID: ")
}
cat("Retrieving citation data...\n")
# print() es Ãºtil para imprimir objetos, no para sacar mensajes.
# message() es una manera alternativa de concatenar textos, pero aÃ±ade siempre el \n al final, y sale en rojo como los mensajes de error o advertencias
# Obtener las citas
citeByYear <- get_citation_history(ID)
cat("... citations\n")
# Obtener otra informaciÃ³n del perfil
profile <- get_profile(ID)
cat("... profile\n")
# Obtener las publicaciones
pubs <- get_publications(ID)
cat("... publications.\n\n")
# AÃ±adir una columna más con el orden (rank)
pubs$rank <- seq.int(nrow(pubs))
# Cálculo del Indice H actual y futuro
thisYear <- as.integer(format(Sys.Date(), "%Y"))
hIndex <- predict_h_index(ID)
hIndex$years_ahead <- hIndex$years_ahead + thisYear
yearRange <- range(pubs$year, na.rm = TRUE)
theRange <- yearRange[2] - yearRange[1]
cat("Google Scholar's CV summary in", thisYear, ":\n")
cat("Author name:        ", profile$name, "\n")
cat("Affiliation:        ", profile$affiliation, "\n")
cat("Analysed years     =", theRange, "\n")
cat("Total publications =", nrow(pubs), "\n")
cat("Cited =             ", profile$total_cites, "\n")
cat("H-Index =           ", hIndex$h_index[1], "\n\n")
# Enregistrer les articles comme une table csv
id_citations_filepath <- paste("citations-",
profile$name, "-",
ID, "-",
dia_y_hora,
".csv",
sep="")
write.csv(pubs, file = id_citations_filepath)
message("Data saved in ->", id_citations_filepath,"\n")
### CV grÃ¡fico
# ArtÃ­culos ordenados por nÃºmero de citas y pendiente con el Ã­ndice H arriba a la derecha
p1 <- ggplot(pubs, aes(x = rank, y = cites)) +
geom_point(size = 4, alpha = 0.5, shape = 4) +
geom_line(colour = "orange", alpha = 0.7, size = 1.5) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed") +
annotate("text", y = max(pubs$cites), x = max(pubs$rank), label=profile$h_index, hjust = 1) +
labs(x = "Rank", y = "Citations per paper") +
theme(axis.text = element_text(size = 20), axis.title = element_text(size = 24, face = "bold"))
# Ranked total cites of papers and h slope with h in top right
p2 <- ggplot(citeByYear, aes(x = year, y = cites)) +
geom_col(fill = "blue", alpha = 0.7) +
labs(x = "Year", y = "Total Citations") +
theme(axis.text = element_text(size = 20), axis.title = element_text(size = 24, face = "bold"))
# Citations per paper versus year published
p3 <- ggplot(pubs, aes(x = year, y = cites)) +
geom_point(colour = "orange", alpha = 0.5, size = 2) +
labs(x = "Year published", y = "Citations per paper") +
theme(axis.text = element_text(size = 20), axis.title = element_text(size = 24, face = "bold"))
# H-Index prediction for 11 years
p4 <- ggplot(hIndex, aes(x = years_ahead, y = h_index)) +
xlim(min(hIndex$years_ahead)-1, max(hIndex$years_ahead) + 1) +
geom_col(alpha = 0.7) +
labs(x = "Year", y = "H-index prediction") +
theme(axis.text = element_text(size = 20), axis.title = element_text(size = 24, face = "bold"))
# make the grid and save the plot
cv_plots <- paste("CVplots-",
profile$name, "-",
ID, "-",
dia_y_hora,
".png",
sep="")
# dev.new()
png(cv_plots, width = 1200, height = 1200)
grid.arrange(p1, p2, p3, p4, nrow = 2)
dev.off()
message("CV plots were saved in ->", cv_plots, "\n")
# Red de coautores (pero solo los que estÃ¡n en Google Schollar)
# Hay que hacerla de bajo nivel para que no resulte ilegible
coauthor_network <- get_coauthors(ID, n_coauthors = 7)
ca_p <- plot_coauthors(coauthor_network)
cv_acoauthors <- paste("coauthorNetwork-",
profile$name, "-",
ID, "-",
dia_y_hora,
".png",
sep="")
# dev.new()
png(cv_acoauthors, width = 600, height = 600)
grid.arrange(ca_p)
dev.off()
message("Co-author network was saved in ->", cv_acoauthors, "\n")
####################################
## Compare two researchers ##
####################################
# Compare CVs
ids <- c(ID, ID2)
# Get a data frame comparing the number of citations to their work in
# a given year
cs <- compare_scholars(ids)
# remove some 'bad' records without sufficient information
cs <- subset(cs, !is.na(year) & year > 1900)
names <- unique(cs$name)
cat("Comparing careers of:\n", toString(names), "\n")
# comparative representation of cites by year
cs_p <- ggplot(cs, aes(year, cites, group=name, color=name)) +
geom_line() +
theme(legend.position="bottom")
# Compare their career trajectories, based on year of first citation
csc <- compare_scholar_careers(ids)
# plot comparative careers
csc_p <- ggplot(csc, aes(career_year, cites, group=name, color=name)) +
geom_line() +
geom_point() +
theme(legend.position=c(.2, .8))
# Save comparative records
comparative <- paste("comparativeCareers-",
dia_y_hora,
".png",
sep="")
png(comparative, width = 1200, height = 600)
grid.arrange(cs_p, csc_p, nrow = 1)
dev.off()
message("Comparative careers were saved in ->", comparative, "\n")
# get back to the original directoy
setwd("../")
##############################
## INFO SUR L'ENVIRONNEMENT ##
##############################
# variables
print(ls())
# libraries et d'autres infos
print(sessionInfo())
install.packages("clusterProfile")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("clusterProfiler")
install.packages("clusterProfile")
install.packages("reshape")
install.packages("wordcloud")
dataset = read.delim(df)
head(df)
png("AVerQueSale.png", width = 480, height = 480)
comparison.cloud(df, max.words = 2000, random.order=FALSE, c(4,04), title.size = 1.4)
dev.off()
dtm <- TermDocumentMatrix(files)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
head(d, 10)
library(pdftools)
# Library for plotting
library(ggplot2)
# Text Mining library
library("tm")
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
dtm <- TermDocumentMatrix(files)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
head(d, 10)
setwd("C:/Users/charo/OneDrive/Escritorio/Facultad/Cuarto Curso/Primer cuatrimestre/Biología de Sistemas/RedTargetCovid/project_template")
